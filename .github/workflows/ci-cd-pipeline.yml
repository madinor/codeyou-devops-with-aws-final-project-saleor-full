name: CI/CD Pipeline
'on':
  push:
    branches:
      - master
      - develop
      - staging
      - production
jobs:
  lint:
    name: Linting and Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install ruff pip-audit
      - name: Run Linter
        run: ruff check . || true
      - name: Run Dependency Analysis
        run: pip-audit || true
  build:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker Compose
        run: |
          sudo sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build Docker Image for Saleor API
        run: docker build -t project-saleor-api ./saleor-api
      - name: Build Docker Image for Saleor Dashboard
        run: docker build -t project-saleor-dashboard ./saleor-dashboard
      - name: Build and Start Services for Saleor Platform
        run: |
          cd saleor-platform
          docker-compose build
          docker-compose up -d
      - name: Health Check for Saleor API
        run: |
          docker run --rm -d -p 8001:8000 --name saleor-api project-saleor-api
          sleep 60
          if curl -f http://localhost:8001/graphql; then
            echo "Health check passed"
          elif [ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/graphql)" -eq 404 ]; then  
            echo "Health check succeded with 404 Not Found" 
          else
            echo "Health check failed"
            exit 1
          fi
          docker stop saleor-api
      - name: Trivy Scan for Saleor API
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image project-saleor-api || true
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Saleor API to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/project-saleor-api
      - name: Push Saleor Dashboard to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/project-saleor-dashboard
  staging:
    name: Staging Pipeline
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Validate Compose
        run: |
          docker-compose -f saleor-platform/docker-compose.yml up
          --abort-on-container-exit
      - name: Build Docker Image for Saleor API
        run: 'docker build -t project-saleor-api:staging ./saleor-api'
      - name: Push Saleor API to DockerHub
        run: 'docker push project-saleor-api:staging'
      - name: Build Docker Image for Saleor Dashboard
        run: 'docker build -t project-saleor-dashboard:staging ./saleor-dashboard'
      - name: Push Saleor Dashboard to DockerHub
        run: 'docker push project-saleor-dashboard:staging'
  production:
    name: Production Pipeline
    runs-on: ubuntu-latest
    needs: staging
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Ensure Staging Completeness
        run: echo "Ensure all tests from staging are successful"
      - name: Build Docker Image for Saleor API
        run: 'docker build -t project-saleor-api:production ./saleor-api'
      - name: Push Saleor API to DockerHub
        run: |
          docker tag project-saleor-api:production project-saleor-api:latest
          docker push project-saleor-api:production
          docker push project-saleor-api:latest
      - name: Build Docker Image for Saleor Dashboard
        run: 'docker build -t project-saleor-dashboard:production ./saleor-dashboard'
      - name: Push Saleor Dashboard to DockerHub
        run: |
          docker tag project-saleor-dashboard:production
          project-saleor-dashboard:latest

          docker push project-saleor-dashboard:production

          docker push project-saleor-dashboard:latest
      - name: Build and Start Services for Saleor Platform
        run: |
          cd saleor-platform
          docker-compose build
          docker-compose up -d
